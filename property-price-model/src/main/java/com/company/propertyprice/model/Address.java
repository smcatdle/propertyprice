package com.company.propertyprice.model;

// Generated May 6, 2014 5:18:09 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * Address generated by hbm2java
 */
public class Address implements java.io.Serializable {
		
	private static final Logger logger = Logger.getLogger(Address.class.getName());
	
	private int id;
	private GeoCode geocode;
	private String addressLine1;
	private String addressLine2;
	private String addressLine3;
	private String addressLine4;
	private String addressLine5;
	private Date dateCreated;
	private Date dateUpdated;
	private Set<PropertySale> propertySales = new HashSet<PropertySale>(0);
	private Set<Property> daftSales = new HashSet<Property>(0);

	public Address() {
	}

	public Address(int id, String addressLine1) {
		this.id = id;
		this.addressLine1 = addressLine1;
	}

	public Address(int id, String addressLine1, String addressLine2,
			String addressLine3, String addressLine4, String addressLine5,
			Double geocodeLatitude, Double geocodeLongitude,
			Set<PropertySale> propertySales) {
		this.id = id;
		this.addressLine1 = addressLine1;
		this.addressLine2 = addressLine2;
		this.addressLine3 = addressLine3;
		this.addressLine4 = addressLine4;
		this.addressLine5 = addressLine5;
		this.propertySales = propertySales;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return the geocode
	 */
	public GeoCode getGeocode() {
		return geocode;
	}

	/**
	 * @param geocode the geocode to set
	 */
	public void setGeocode(GeoCode geocode) {
		this.geocode = geocode;
	}

	public String getAddressLine1() {
		return this.addressLine1;
	}

	public void setAddressLine1(String addressLine1) {
		this.addressLine1 = addressLine1;
	}

	public String getAddressLine2() {
		return this.addressLine2;
	}

	public void setAddressLine2(String addressLine2) {
		this.addressLine2 = addressLine2;
	}

	public String getAddressLine3() {
		return this.addressLine3;
	}

	public void setAddressLine3(String addressLine3) {
		this.addressLine3 = addressLine3;
	}

	public String getAddressLine4() {
		return this.addressLine4;
	}

	public void setAddressLine4(String addressLine4) {
		this.addressLine4 = addressLine4;
	}

	public String getAddressLine5() {
		return this.addressLine5;
	}

	public void setAddressLine5(String addressLine5) {
		this.addressLine5 = addressLine5;
	}

	/**
	 * @return the dateCreated
	 */
	public Date getDateCreated() {
		return dateCreated;
	}

	/**
	 * @param dateCreated the dateCreated to set
	 */
	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	/**
	 * @return the dateUpdated
	 */
	public Date getDateUpdated() {
		return dateUpdated;
	}

	/**
	 * @param dateUpdated the dateUpdated to set
	 */
	public void setDateUpdated(Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	public Set<PropertySale> getPropertySales() {
		return this.propertySales;
	}

	public void setPropertySales(Set<PropertySale> propertySales) {
		this.propertySales = propertySales;
	}

	
	/**
	 * @return the daftSales
	 */
	public Set<Property> getDaftSales() {
	    return daftSales;
	}

	/**
	 * @param daftSales the daftSales to set
	 */
	public void setDaftSales(Set<Property> daftSales) {
	    this.daftSales = daftSales;
	}

	public String concatAddress() {
		  
	  String addressText = "";
	  
	  addressText = addAddressLine(addressText, getAddressLine1());
	  addressText = addAddressLine(addressText, getAddressLine2());
	  addressText = addAddressLine(addressText, getAddressLine3());
	  addressText = addAddressLine(addressText, getAddressLine4());
	  addressText = addAddressLine(addressText, getAddressLine5());

	  addressText = addressText + ", Ireland";
	  
	  logger.log(Level.INFO, "The concat address is : [" + addressText + "]");
	      
	  return addressText;
	}

	
	public String formatAddress() {
		  
		  String addressText = getAddressLine1().trim();
		      
		      // Check the address2 field is not blank before appending
		  if (getAddressLine2() != null && getAddressLine2().length() > 1) {
		  	addressText = addressText + ",\n" + getAddressLine2().trim();
		  }
		  
		  // Check the address3 field is not blank before appending
		  if (getAddressLine3() != null && getAddressLine3().length() > 1) {
		  	addressText = addressText + ",\n" + getAddressLine3().trim();
		  }
		  
		  // Check the address4 field is not blank before appending
		  if (getAddressLine4() != null && getAddressLine4().length() > 1) {
		  	addressText = addressText + ",\n" + getAddressLine4().trim();
		  }
		  
		  // Check the address5 field is not blank before appending
		  if (getAddressLine5() != null && getAddressLine5().length() > 1) {
		  	addressText = addressText + ",\n" + getAddressLine5().trim();
		  }
		  
		  addressText = addressText + ".\n";
		  
		  logger.log(Level.INFO, "The formatted address is : [" + addressText + "]");
		      
		      return addressText;
	}

	
	public Address deepCopy() {
	
	  Address copy = new Address();
	  
	  copy.setId(this.getId());
	  
	  copy.setAddressLine1(this.getAddressLine1());
	  copy.setAddressLine2(this.getAddressLine2());
	  copy.setAddressLine3(this.getAddressLine3());
	  copy.setAddressLine4(this.getAddressLine4());
	  copy.setAddressLine5(this.getAddressLine5());
	  
	  copy.setDateCreated(this.getDateCreated());
	  copy.setDateUpdated(this.getDateUpdated());
	  
	  copy.setGeocode(this.getGeocode());
	  
	  return copy;
	  
	}
	
	
	private String addAddressLine(String currentAddressLine, String line) {
	    String addressLine = "";
	    
	    // Check the address line field is not blank before appending  
	    if (line != null && line.length() > 1) {
		if (currentAddressLine != null & currentAddressLine.length() > 0) {
		    addressLine = currentAddressLine + ", " + line.trim();
		} else {
		    addressLine = line;
		}
		
	    } else {
		addressLine = currentAddressLine;
	    }
		  
	    return addressLine;
	}
	
	public Address cleanupAddress() {
		
		if (addressLine1 != null) this.addressLine1  = this.addressLine1.replaceAll("&(?!amp;)|[/,-\\.]", " ").toUpperCase();
		if (addressLine2 != null) this.addressLine2 = this.addressLine2.replaceAll("&(?!amp;)|[/,-\\.]", " ").toUpperCase();
		if (addressLine3 != null) this.addressLine3 = this.addressLine3.replaceAll("&(?!amp;)|[/,-\\.]", " ").toUpperCase();
		if (addressLine4 != null) this.addressLine4 = this.addressLine4.replaceAll("&(?!amp;)|[/,-\\.]", " ").toUpperCase();
		if (addressLine5 != null) this.addressLine5 = this.addressLine5.replaceAll("&(?!amp;)|[/,-\\.]", " ").toUpperCase();
		
		return this;
	}
}
